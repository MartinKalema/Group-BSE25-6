name: CI/CD Pipeline

# Trigger the workflow on push or pull request to the staging branch
on:
  push:
    branches:
      - staging
    paths-ignore:
      - 'README.md'

jobs:
  install:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Install dependencies and run tests for the backend
      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Run backend tests
        run: |
          cd backend/__tests__
          npm test -- --passWithNoTests

      # Install dependencies and run tests for the frontend
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run frontend tests
        run: |
          cd frontend/__tests__
          npm test -- --passWithNoTests

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build and push backend Docker image
      - name: Build, tag, and push backend image to Amazon ECR
        id: build-backend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_BACKEND_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          echo "Pushing to ECR repository: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # Build and push frontend Docker image
      - name: Build, tag, and push frontend image to Amazon ECR
        id: build-frontend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_FRONTEND_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          echo "Pushing to ECR repository: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-ecr-image
    if: github.ref == 'refs/heads/staging'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy to Staging
        if: success()
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_STATIC_IP }} << 'EOF'

          mkdir -p deployment

          git init deployment

          cd deployment

          git config --global init.defaultBranch staging

          git remote get-url origin || git remote add origin ${{ secrets.PROJECT_URL }}

          git config core.sparseCheckout true

          echo "K8s/" > .git/info/sparse-checkout

          git fetch origin staging

          git checkout staging

          git pull origin staging

          if ! minikube status | grep -q "Running"; then
            minikube start
          fi

          kubectl delete deployments --all -n bse256 --ignore-not-found

          kubectl delete services --all -n bse256 --ignore-not-found

          cd K8s

          kubectl apply -f namespace.yaml

          sudo apt install awscli

          export ECR_PASSWORD=$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }})

          kubectl create secret docker-registry ecr-secret \
          --docker-server=${{ secrets.DOCKER_SERVER }} \
          --docker-username=AWS \
          --docker-password="$ECR_PASSWORD" \
          --docker-email=${{ secrets.AWS_EMAIL }} \
          -n bse256

          kubectl patch serviceaccount default -n bse256 -p '{"imagePullSecrets": [{"name": "ecr-secret"}]}'

          kubectl apply -f mongodb-deployment.yaml
          kubectl apply -f mongodb-service.yaml
          kubectl apply -f backend-deployment.yaml
          kubectl apply -f backend-service.yaml
          kubectl apply -f frontend-deployment.yaml
          kubectl apply -f frontend-service.yaml

          EOF
